/*
AutoGlue API

API for managing K3s clusters across cloud providers

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package autoglue

import (
	"encoding/json"
)

// checks if the TaintsNodePoolResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaintsNodePoolResponse{}

// TaintsNodePoolResponse struct for TaintsNodePoolResponse
type TaintsNodePoolResponse struct {
	Id      *string             `json:"id,omitempty"`
	Name    *string             `json:"name,omitempty"`
	Servers []TaintsServerBrief `json:"servers,omitempty"`
}

// NewTaintsNodePoolResponse instantiates a new TaintsNodePoolResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaintsNodePoolResponse() *TaintsNodePoolResponse {
	this := TaintsNodePoolResponse{}
	return &this
}

// NewTaintsNodePoolResponseWithDefaults instantiates a new TaintsNodePoolResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaintsNodePoolResponseWithDefaults() *TaintsNodePoolResponse {
	this := TaintsNodePoolResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaintsNodePoolResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaintsNodePoolResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaintsNodePoolResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaintsNodePoolResponse) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaintsNodePoolResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaintsNodePoolResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaintsNodePoolResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaintsNodePoolResponse) SetName(v string) {
	o.Name = &v
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *TaintsNodePoolResponse) GetServers() []TaintsServerBrief {
	if o == nil || IsNil(o.Servers) {
		var ret []TaintsServerBrief
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaintsNodePoolResponse) GetServersOk() ([]TaintsServerBrief, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *TaintsNodePoolResponse) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []TaintsServerBrief and assigns it to the Servers field.
func (o *TaintsNodePoolResponse) SetServers(v []TaintsServerBrief) {
	o.Servers = v
}

func (o TaintsNodePoolResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaintsNodePoolResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Servers) {
		toSerialize["servers"] = o.Servers
	}
	return toSerialize, nil
}

type NullableTaintsNodePoolResponse struct {
	value *TaintsNodePoolResponse
	isSet bool
}

func (v NullableTaintsNodePoolResponse) Get() *TaintsNodePoolResponse {
	return v.value
}

func (v *NullableTaintsNodePoolResponse) Set(val *TaintsNodePoolResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTaintsNodePoolResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTaintsNodePoolResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaintsNodePoolResponse(val *TaintsNodePoolResponse) *NullableTaintsNodePoolResponse {
	return &NullableTaintsNodePoolResponse{value: val, isSet: true}
}

func (v NullableTaintsNodePoolResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaintsNodePoolResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
