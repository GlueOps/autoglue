/*
AutoGlue API

API for managing K3s clusters across cloud providers

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package autoglue

import (
	"encoding/json"
)

// checks if the AuthnMeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthnMeResponse{}

// AuthnMeResponse struct for AuthnMeResponse
type AuthnMeResponse struct {
	Claims         *AuthnAuthClaimsDTO `json:"claims,omitempty"`
	OrgRole        *string             `json:"org_role,omitempty"`
	OrganizationId *string             `json:"organization_id,omitempty"`
	UserId         *AuthnUserDTO       `json:"user_id,omitempty"`
}

// NewAuthnMeResponse instantiates a new AuthnMeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthnMeResponse() *AuthnMeResponse {
	this := AuthnMeResponse{}
	return &this
}

// NewAuthnMeResponseWithDefaults instantiates a new AuthnMeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthnMeResponseWithDefaults() *AuthnMeResponse {
	this := AuthnMeResponse{}
	return &this
}

// GetClaims returns the Claims field value if set, zero value otherwise.
func (o *AuthnMeResponse) GetClaims() AuthnAuthClaimsDTO {
	if o == nil || IsNil(o.Claims) {
		var ret AuthnAuthClaimsDTO
		return ret
	}
	return *o.Claims
}

// GetClaimsOk returns a tuple with the Claims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthnMeResponse) GetClaimsOk() (*AuthnAuthClaimsDTO, bool) {
	if o == nil || IsNil(o.Claims) {
		return nil, false
	}
	return o.Claims, true
}

// HasClaims returns a boolean if a field has been set.
func (o *AuthnMeResponse) HasClaims() bool {
	if o != nil && !IsNil(o.Claims) {
		return true
	}

	return false
}

// SetClaims gets a reference to the given AuthnAuthClaimsDTO and assigns it to the Claims field.
func (o *AuthnMeResponse) SetClaims(v AuthnAuthClaimsDTO) {
	o.Claims = &v
}

// GetOrgRole returns the OrgRole field value if set, zero value otherwise.
func (o *AuthnMeResponse) GetOrgRole() string {
	if o == nil || IsNil(o.OrgRole) {
		var ret string
		return ret
	}
	return *o.OrgRole
}

// GetOrgRoleOk returns a tuple with the OrgRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthnMeResponse) GetOrgRoleOk() (*string, bool) {
	if o == nil || IsNil(o.OrgRole) {
		return nil, false
	}
	return o.OrgRole, true
}

// HasOrgRole returns a boolean if a field has been set.
func (o *AuthnMeResponse) HasOrgRole() bool {
	if o != nil && !IsNil(o.OrgRole) {
		return true
	}

	return false
}

// SetOrgRole gets a reference to the given string and assigns it to the OrgRole field.
func (o *AuthnMeResponse) SetOrgRole(v string) {
	o.OrgRole = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *AuthnMeResponse) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthnMeResponse) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *AuthnMeResponse) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *AuthnMeResponse) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AuthnMeResponse) GetUserId() AuthnUserDTO {
	if o == nil || IsNil(o.UserId) {
		var ret AuthnUserDTO
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthnMeResponse) GetUserIdOk() (*AuthnUserDTO, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AuthnMeResponse) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given AuthnUserDTO and assigns it to the UserId field.
func (o *AuthnMeResponse) SetUserId(v AuthnUserDTO) {
	o.UserId = &v
}

func (o AuthnMeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthnMeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Claims) {
		toSerialize["claims"] = o.Claims
	}
	if !IsNil(o.OrgRole) {
		toSerialize["org_role"] = o.OrgRole
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

type NullableAuthnMeResponse struct {
	value *AuthnMeResponse
	isSet bool
}

func (v NullableAuthnMeResponse) Get() *AuthnMeResponse {
	return v.value
}

func (v *NullableAuthnMeResponse) Set(val *AuthnMeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthnMeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthnMeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthnMeResponse(val *AuthnMeResponse) *NullableAuthnMeResponse {
	return &NullableAuthnMeResponse{value: val, isSet: true}
}

func (v NullableAuthnMeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthnMeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
