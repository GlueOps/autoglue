/*
AutoGlue API

API for managing K3s clusters across cloud providers

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package autoglue

import (
	"encoding/json"
	"fmt"
)

// ModelsMemberRole the model 'ModelsMemberRole'
type ModelsMemberRole string

// List of models.MemberRole
const (
	MemberRoleAdmin  ModelsMemberRole = "admin"
	MemberRoleMember ModelsMemberRole = "member"
	MemberRoleUser   ModelsMemberRole = "user"
)

// All allowed values of ModelsMemberRole enum
var AllowedModelsMemberRoleEnumValues = []ModelsMemberRole{
	"admin",
	"member",
	"user",
}

func (v *ModelsMemberRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsMemberRole(value)
	for _, existing := range AllowedModelsMemberRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsMemberRole", value)
}

// NewModelsMemberRoleFromValue returns a pointer to a valid ModelsMemberRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsMemberRoleFromValue(v string) (*ModelsMemberRole, error) {
	ev := ModelsMemberRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsMemberRole: valid values are %v", v, AllowedModelsMemberRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsMemberRole) IsValid() bool {
	for _, existing := range AllowedModelsMemberRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to models.MemberRole value
func (v ModelsMemberRole) Ptr() *ModelsMemberRole {
	return &v
}

type NullableModelsMemberRole struct {
	value *ModelsMemberRole
	isSet bool
}

func (v NullableModelsMemberRole) Get() *ModelsMemberRole {
	return v.value
}

func (v *NullableModelsMemberRole) Set(val *ModelsMemberRole) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsMemberRole) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsMemberRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsMemberRole(val *ModelsMemberRole) *NullableModelsMemberRole {
	return &NullableModelsMemberRole{value: val, isSet: true}
}

func (v NullableModelsMemberRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsMemberRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
