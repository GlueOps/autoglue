/*
AutoGlue API

API for managing K3s clusters across cloud providers

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package autoglue

import (
	"encoding/json"
)

// checks if the NodepoolsAttachLabelsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodepoolsAttachLabelsRequest{}

// NodepoolsAttachLabelsRequest struct for NodepoolsAttachLabelsRequest
type NodepoolsAttachLabelsRequest struct {
	LabelIds []string `json:"label_ids,omitempty"`
}

// NewNodepoolsAttachLabelsRequest instantiates a new NodepoolsAttachLabelsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodepoolsAttachLabelsRequest() *NodepoolsAttachLabelsRequest {
	this := NodepoolsAttachLabelsRequest{}
	return &this
}

// NewNodepoolsAttachLabelsRequestWithDefaults instantiates a new NodepoolsAttachLabelsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodepoolsAttachLabelsRequestWithDefaults() *NodepoolsAttachLabelsRequest {
	this := NodepoolsAttachLabelsRequest{}
	return &this
}

// GetLabelIds returns the LabelIds field value if set, zero value otherwise.
func (o *NodepoolsAttachLabelsRequest) GetLabelIds() []string {
	if o == nil || IsNil(o.LabelIds) {
		var ret []string
		return ret
	}
	return o.LabelIds
}

// GetLabelIdsOk returns a tuple with the LabelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodepoolsAttachLabelsRequest) GetLabelIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.LabelIds) {
		return nil, false
	}
	return o.LabelIds, true
}

// HasLabelIds returns a boolean if a field has been set.
func (o *NodepoolsAttachLabelsRequest) HasLabelIds() bool {
	if o != nil && !IsNil(o.LabelIds) {
		return true
	}

	return false
}

// SetLabelIds gets a reference to the given []string and assigns it to the LabelIds field.
func (o *NodepoolsAttachLabelsRequest) SetLabelIds(v []string) {
	o.LabelIds = v
}

func (o NodepoolsAttachLabelsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodepoolsAttachLabelsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LabelIds) {
		toSerialize["label_ids"] = o.LabelIds
	}
	return toSerialize, nil
}

type NullableNodepoolsAttachLabelsRequest struct {
	value *NodepoolsAttachLabelsRequest
	isSet bool
}

func (v NullableNodepoolsAttachLabelsRequest) Get() *NodepoolsAttachLabelsRequest {
	return v.value
}

func (v *NullableNodepoolsAttachLabelsRequest) Set(val *NodepoolsAttachLabelsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodepoolsAttachLabelsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodepoolsAttachLabelsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodepoolsAttachLabelsRequest(val *NodepoolsAttachLabelsRequest) *NullableNodepoolsAttachLabelsRequest {
	return &NullableNodepoolsAttachLabelsRequest{value: val, isSet: true}
}

func (v NullableNodepoolsAttachLabelsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodepoolsAttachLabelsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
