/* tslint:disable */
/* eslint-disable */
/**
 * AutoGlue API
 * API for managing K3s clusters across cloud providers
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  NodepoolsAnnotationBrief,
  NodepoolsAttachAnnotationsRequest,
  NodepoolsAttachLabelsRequest,
  NodepoolsAttachServersRequest,
  NodepoolsAttachTaintsRequest,
  NodepoolsCreateNodePoolRequest,
  NodepoolsLabelBrief,
  NodepoolsNodePoolResponse,
  NodepoolsServerBrief,
  NodepoolsTaintBrief,
  NodepoolsUpdateNodePoolRequest,
} from "../models/index";
import {
  NodepoolsAnnotationBriefFromJSON,
  NodepoolsAnnotationBriefToJSON,
  NodepoolsAttachAnnotationsRequestFromJSON,
  NodepoolsAttachAnnotationsRequestToJSON,
  NodepoolsAttachLabelsRequestFromJSON,
  NodepoolsAttachLabelsRequestToJSON,
  NodepoolsAttachServersRequestFromJSON,
  NodepoolsAttachServersRequestToJSON,
  NodepoolsAttachTaintsRequestFromJSON,
  NodepoolsAttachTaintsRequestToJSON,
  NodepoolsCreateNodePoolRequestFromJSON,
  NodepoolsCreateNodePoolRequestToJSON,
  NodepoolsLabelBriefFromJSON,
  NodepoolsLabelBriefToJSON,
  NodepoolsNodePoolResponseFromJSON,
  NodepoolsNodePoolResponseToJSON,
  NodepoolsServerBriefFromJSON,
  NodepoolsServerBriefToJSON,
  NodepoolsTaintBriefFromJSON,
  NodepoolsTaintBriefToJSON,
  NodepoolsUpdateNodePoolRequestFromJSON,
  NodepoolsUpdateNodePoolRequestToJSON,
} from "../models/index";

export interface AttachNodePoolAnnotationsRequest {
  xOrgID: string;
  id: string;
  body: NodepoolsAttachAnnotationsRequest;
}

export interface AttachNodePoolLabelsRequest {
  xOrgID: string;
  id: string;
  body: NodepoolsAttachLabelsRequest;
}

export interface AttachNodePoolServersRequest {
  xOrgID: string;
  id: string;
  body: NodepoolsAttachServersRequest;
}

export interface AttachNodePoolTaintsRequest {
  xOrgID: string;
  id: string;
  body: NodepoolsAttachTaintsRequest;
}

export interface CreateNodePoolRequest {
  xOrgID: string;
  body: NodepoolsCreateNodePoolRequest;
}

export interface DeleteNodePoolRequest {
  xOrgID: string;
  id: string;
}

export interface DetachNodePoolAnnotationRequest {
  xOrgID: string;
  id: string;
  annotationId: string;
}

export interface DetachNodePoolLabelRequest {
  xOrgID: string;
  id: string;
  labelId: string;
}

export interface DetachNodePoolServerRequest {
  xOrgID: string;
  id: string;
  serverId: string;
}

export interface DetachNodePoolTaintRequest {
  xOrgID: string;
  id: string;
  taintId: string;
}

export interface GetNodePoolRequest {
  xOrgID: string;
  id: string;
  include?: string;
}

export interface ListNodePoolAnnotationsRequest {
  xOrgID: string;
  id: string;
}

export interface ListNodePoolLabelsRequest {
  xOrgID: string;
  id: string;
}

export interface ListNodePoolServersRequest {
  xOrgID: string;
  id: string;
}

export interface ListNodePoolTaintsRequest {
  xOrgID: string;
  id: string;
}

export interface ListNodePoolsRequest {
  xOrgID: string;
  q?: string;
  include?: string;
}

export interface UpdateNodePoolRequest {
  xOrgID: string;
  id: string;
  body: NodepoolsUpdateNodePoolRequest;
}

/**
 *
 */
export class NodePoolsApi extends runtime.BaseAPI {
  /**
   * Attach annotations to a node pool (org scoped)
   */
  async attachNodePoolAnnotationsRaw(
    requestParameters: AttachNodePoolAnnotationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling attachNodePoolAnnotations().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling attachNodePoolAnnotations().',
      );
    }

    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling attachNodePoolAnnotations().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/annotations`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: NodepoolsAttachAnnotationsRequestToJSON(
          requestParameters["body"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Attach annotations to a node pool (org scoped)
   */
  async attachNodePoolAnnotations(
    requestParameters: AttachNodePoolAnnotationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.attachNodePoolAnnotationsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Attach labels to a node pool (org scoped)
   */
  async attachNodePoolLabelsRaw(
    requestParameters: AttachNodePoolLabelsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling attachNodePoolLabels().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling attachNodePoolLabels().',
      );
    }

    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling attachNodePoolLabels().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/labels`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: NodepoolsAttachLabelsRequestToJSON(requestParameters["body"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Attach labels to a node pool (org scoped)
   */
  async attachNodePoolLabels(
    requestParameters: AttachNodePoolLabelsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.attachNodePoolLabelsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Attach servers to a node pool (org scoped)
   */
  async attachNodePoolServersRaw(
    requestParameters: AttachNodePoolServersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling attachNodePoolServers().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling attachNodePoolServers().',
      );
    }

    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling attachNodePoolServers().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/servers`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: NodepoolsAttachServersRequestToJSON(requestParameters["body"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Attach servers to a node pool (org scoped)
   */
  async attachNodePoolServers(
    requestParameters: AttachNodePoolServersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.attachNodePoolServersRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Attach taints to a node pool (org scoped)
   */
  async attachNodePoolTaintsRaw(
    requestParameters: AttachNodePoolTaintsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling attachNodePoolTaints().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling attachNodePoolTaints().',
      );
    }

    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling attachNodePoolTaints().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/taints`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: NodepoolsAttachTaintsRequestToJSON(requestParameters["body"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Attach taints to a node pool (org scoped)
   */
  async attachNodePoolTaints(
    requestParameters: AttachNodePoolTaintsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.attachNodePoolTaintsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Creates a node group. Optionally attach initial servers.
   * Create node group (org scoped)
   */
  async createNodePoolRaw(
    requestParameters: CreateNodePoolRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NodepoolsNodePoolResponse>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling createNodePool().',
      );
    }

    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling createNodePool().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: NodepoolsCreateNodePoolRequestToJSON(requestParameters["body"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NodepoolsNodePoolResponseFromJSON(jsonValue),
    );
  }

  /**
   * Creates a node group. Optionally attach initial servers.
   * Create node group (org scoped)
   */
  async createNodePool(
    requestParameters: CreateNodePoolRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NodepoolsNodePoolResponse> {
    const response = await this.createNodePoolRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Permanently deletes the node pool.
   * Delete node pool (org scoped)
   */
  async deleteNodePoolRaw(
    requestParameters: DeleteNodePoolRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling deleteNodePool().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling deleteNodePool().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Permanently deletes the node pool.
   * Delete node pool (org scoped)
   */
  async deleteNodePool(
    requestParameters: DeleteNodePoolRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.deleteNodePoolRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Detach one annotation from a node pool (org scoped)
   */
  async detachNodePoolAnnotationRaw(
    requestParameters: DetachNodePoolAnnotationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling detachNodePoolAnnotation().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling detachNodePoolAnnotation().',
      );
    }

    if (requestParameters["annotationId"] == null) {
      throw new runtime.RequiredError(
        "annotationId",
        'Required parameter "annotationId" was null or undefined when calling detachNodePoolAnnotation().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/annotations/{annotationId}`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );
    urlPath = urlPath.replace(
      `{${"annotationId"}}`,
      encodeURIComponent(String(requestParameters["annotationId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Detach one annotation from a node pool (org scoped)
   */
  async detachNodePoolAnnotation(
    requestParameters: DetachNodePoolAnnotationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.detachNodePoolAnnotationRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Detach one label from a node pool (org scoped)
   */
  async detachNodePoolLabelRaw(
    requestParameters: DetachNodePoolLabelRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling detachNodePoolLabel().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling detachNodePoolLabel().',
      );
    }

    if (requestParameters["labelId"] == null) {
      throw new runtime.RequiredError(
        "labelId",
        'Required parameter "labelId" was null or undefined when calling detachNodePoolLabel().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/labels/{labelId}`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );
    urlPath = urlPath.replace(
      `{${"labelId"}}`,
      encodeURIComponent(String(requestParameters["labelId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Detach one label from a node pool (org scoped)
   */
  async detachNodePoolLabel(
    requestParameters: DetachNodePoolLabelRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.detachNodePoolLabelRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Detach one server from a node pool (org scoped)
   */
  async detachNodePoolServerRaw(
    requestParameters: DetachNodePoolServerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling detachNodePoolServer().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling detachNodePoolServer().',
      );
    }

    if (requestParameters["serverId"] == null) {
      throw new runtime.RequiredError(
        "serverId",
        'Required parameter "serverId" was null or undefined when calling detachNodePoolServer().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/servers/{serverId}`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );
    urlPath = urlPath.replace(
      `{${"serverId"}}`,
      encodeURIComponent(String(requestParameters["serverId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Detach one server from a node pool (org scoped)
   */
  async detachNodePoolServer(
    requestParameters: DetachNodePoolServerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.detachNodePoolServerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Detach one taint from a node pool (org scoped)
   */
  async detachNodePoolTaintRaw(
    requestParameters: DetachNodePoolTaintRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling detachNodePoolTaint().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling detachNodePoolTaint().',
      );
    }

    if (requestParameters["taintId"] == null) {
      throw new runtime.RequiredError(
        "taintId",
        'Required parameter "taintId" was null or undefined when calling detachNodePoolTaint().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/taints/{taintId}`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );
    urlPath = urlPath.replace(
      `{${"taintId"}}`,
      encodeURIComponent(String(requestParameters["taintId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Detach one taint from a node pool (org scoped)
   */
  async detachNodePoolTaint(
    requestParameters: DetachNodePoolTaintRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.detachNodePoolTaintRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns one node group. Add `include=servers` to include servers.
   * Get node group by ID (org scoped)
   */
  async getNodePoolRaw(
    requestParameters: GetNodePoolRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NodepoolsNodePoolResponse>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling getNodePool().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getNodePool().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["include"] != null) {
      queryParameters["include"] = requestParameters["include"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NodepoolsNodePoolResponseFromJSON(jsonValue),
    );
  }

  /**
   * Returns one node group. Add `include=servers` to include servers.
   * Get node group by ID (org scoped)
   */
  async getNodePool(
    requestParameters: GetNodePoolRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NodepoolsNodePoolResponse> {
    const response = await this.getNodePoolRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List annotations attached to a node pool (org scoped)
   */
  async listNodePoolAnnotationsRaw(
    requestParameters: ListNodePoolAnnotationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<NodepoolsAnnotationBrief>>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling listNodePoolAnnotations().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling listNodePoolAnnotations().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/annotations`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(NodepoolsAnnotationBriefFromJSON),
    );
  }

  /**
   * List annotations attached to a node pool (org scoped)
   */
  async listNodePoolAnnotations(
    requestParameters: ListNodePoolAnnotationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<NodepoolsAnnotationBrief>> {
    const response = await this.listNodePoolAnnotationsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List labels attached to a node pool (org scoped)
   */
  async listNodePoolLabelsRaw(
    requestParameters: ListNodePoolLabelsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<NodepoolsLabelBrief>>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling listNodePoolLabels().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling listNodePoolLabels().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/labels`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(NodepoolsLabelBriefFromJSON),
    );
  }

  /**
   * List labels attached to a node pool (org scoped)
   */
  async listNodePoolLabels(
    requestParameters: ListNodePoolLabelsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<NodepoolsLabelBrief>> {
    const response = await this.listNodePoolLabelsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List servers attached to a node pool (org scoped)
   */
  async listNodePoolServersRaw(
    requestParameters: ListNodePoolServersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<NodepoolsServerBrief>>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling listNodePoolServers().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling listNodePoolServers().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/servers`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(NodepoolsServerBriefFromJSON),
    );
  }

  /**
   * List servers attached to a node pool (org scoped)
   */
  async listNodePoolServers(
    requestParameters: ListNodePoolServersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<NodepoolsServerBrief>> {
    const response = await this.listNodePoolServersRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List taints attached to a node pool (org scoped)
   */
  async listNodePoolTaintsRaw(
    requestParameters: ListNodePoolTaintsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<NodepoolsTaintBrief>>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling listNodePoolTaints().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling listNodePoolTaints().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}/taints`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(NodepoolsTaintBriefFromJSON),
    );
  }

  /**
   * List taints attached to a node pool (org scoped)
   */
  async listNodePoolTaints(
    requestParameters: ListNodePoolTaintsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<NodepoolsTaintBrief>> {
    const response = await this.listNodePoolTaintsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns node pools for the organization in X-Org-ID. Add `include=servers` to include attached servers. Filter by `q` (name contains).
   * List node pools (org scoped)
   */
  async listNodePoolsRaw(
    requestParameters: ListNodePoolsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<NodepoolsNodePoolResponse>>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling listNodePools().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["include"] != null) {
      queryParameters["include"] = requestParameters["include"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(NodepoolsNodePoolResponseFromJSON),
    );
  }

  /**
   * Returns node pools for the organization in X-Org-ID. Add `include=servers` to include attached servers. Filter by `q` (name contains).
   * List node pools (org scoped)
   */
  async listNodePools(
    requestParameters: ListNodePoolsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<NodepoolsNodePoolResponse>> {
    const response = await this.listNodePoolsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Partially update node pool fields.
   * Update node pool (org scoped)
   */
  async updateNodePoolRaw(
    requestParameters: UpdateNodePoolRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NodepoolsNodePoolResponse>> {
    if (requestParameters["xOrgID"] == null) {
      throw new runtime.RequiredError(
        "xOrgID",
        'Required parameter "xOrgID" was null or undefined when calling updateNodePool().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling updateNodePool().',
      );
    }

    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling updateNodePool().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (requestParameters["xOrgID"] != null) {
      headerParameters["X-Org-ID"] = String(requestParameters["xOrgID"]);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/node-pools/{id}`;
    urlPath = urlPath.replace(
      `{${"id"}}`,
      encodeURIComponent(String(requestParameters["id"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: NodepoolsUpdateNodePoolRequestToJSON(requestParameters["body"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NodepoolsNodePoolResponseFromJSON(jsonValue),
    );
  }

  /**
   * Partially update node pool fields.
   * Update node pool (org scoped)
   */
  async updateNodePool(
    requestParameters: UpdateNodePoolRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NodepoolsNodePoolResponse> {
    const response = await this.updateNodePoolRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
