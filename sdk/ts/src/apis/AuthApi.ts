/* tslint:disable */
/* eslint-disable */
/**
 * AutoGlue API
 * API for managing K3s clusters across cloud providers
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  AuthnLoginInput,
  AuthnMeResponse,
  AuthnRegisterInput,
} from "../models/index";
import {
  AuthnLoginInputFromJSON,
  AuthnLoginInputToJSON,
  AuthnMeResponseFromJSON,
  AuthnMeResponseToJSON,
  AuthnRegisterInputFromJSON,
  AuthnRegisterInputToJSON,
} from "../models/index";

export interface ChangePasswordRequest {
  body: { [key: string]: string };
}

export interface ConfirmPasswordResetRequest {
  body: { [key: string]: string };
}

export interface IntrospectRequest {
  body: { [key: string]: string };
}

export interface LoginRequest {
  body: AuthnLoginInput;
}

export interface LogoutRequest {
  body: { [key: string]: string };
}

export interface RefreshRequest {
  body: { [key: string]: string };
}

export interface RegisterRequest {
  body: AuthnRegisterInput;
}

export interface RequestPasswordResetRequest {
  body: { [key: string]: string };
}

export interface ResendVerificationRequest {
  body: { [key: string]: string };
}

export interface RotateRefreshTokenRequest {
  body: { [key: string]: string };
}

export interface VerifyEmailRequest {
  token: string;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI {
  /**
   * Changes the password for the authenticated user
   * Change password
   */
  async changePasswordRaw(
    requestParameters: ChangePasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling changePassword().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/auth/password/change`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["body"],
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Changes the password for the authenticated user
   * Change password
   */
  async changePassword(
    requestParameters: ChangePasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.changePasswordRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Resets the password using a valid reset token
   * Confirm password reset
   */
  async confirmPasswordResetRaw(
    requestParameters: ConfirmPasswordResetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling confirmPasswordReset().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/v1/auth/password/reset`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["body"],
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Resets the password using a valid reset token
   * Confirm password reset
   */
  async confirmPasswordReset(
    requestParameters: ConfirmPasswordResetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.confirmPasswordResetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns whether the token is active and basic metadata
   * Introspect a token
   */
  async introspectRaw(
    requestParameters: IntrospectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: any }>> {
    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling introspect().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/v1/auth/introspect`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["body"],
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Returns whether the token is active and basic metadata
   * Introspect a token
   */
  async introspect(
    requestParameters: IntrospectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: any }> {
    const response = await this.introspectRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Authenticates a user and returns a JWT bearer token
   * Authenticate and return a token
   */
  async loginRaw(
    requestParameters: LoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: string }>> {
    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling login().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/v1/auth/login`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AuthnLoginInputToJSON(requestParameters["body"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Authenticates a user and returns a JWT bearer token
   * Authenticate and return a token
   */
  async login(
    requestParameters: LoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: string }> {
    const response = await this.loginRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Revoke a refresh token
   * Logout user
   */
  async logoutRaw(
    requestParameters: LogoutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling logout().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/auth/logout`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["body"],
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Revoke a refresh token
   * Logout user
   */
  async logout(
    requestParameters: LogoutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.logoutRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Revokes all active refresh tokens for the authenticated user
   * Logout from all sessions
   */
  async logoutAllRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/auth/logout_all`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Revokes all active refresh tokens for the authenticated user
   * Logout from all sessions
   */
  async logoutAll(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.logoutAllRaw(initOverrides);
    return await response.value();
  }

  /**
   * Returns the authenticated user\'s profile and auth context
   * Get authenticated user info
   */
  async meRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthnMeResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/auth/me`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthnMeResponseFromJSON(jsonValue),
    );
  }

  /**
   * Returns the authenticated user\'s profile and auth context
   * Get authenticated user info
   */
  async me(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthnMeResponse> {
    const response = await this.meRaw(initOverrides);
    return await response.value();
  }

  /**
   * Use a refresh token to obtain a new access token
   * Refresh access token
   */
  async refreshRaw(
    requestParameters: RefreshRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: string }>> {
    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling refresh().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/auth/refresh`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["body"],
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Use a refresh token to obtain a new access token
   * Refresh access token
   */
  async refresh(
    requestParameters: RefreshRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: string }> {
    const response = await this.refreshRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Registers a new user and stores credentials
   * Register a new user
   */
  async registerRaw(
    requestParameters: RegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling register().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/v1/auth/register`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AuthnRegisterInputToJSON(requestParameters["body"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Registers a new user and stores credentials
   * Register a new user
   */
  async register(
    requestParameters: RegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.registerRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Sends a reset token to the user\'s email address
   * Request password reset
   */
  async requestPasswordResetRaw(
    requestParameters: RequestPasswordResetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling requestPasswordReset().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/v1/auth/password/forgot`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["body"],
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Sends a reset token to the user\'s email address
   * Request password reset
   */
  async requestPasswordReset(
    requestParameters: RequestPasswordResetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.requestPasswordResetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Sends a new email verification token if needed
   * Resend email verification
   */
  async resendVerificationRaw(
    requestParameters: ResendVerificationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling resendVerification().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/v1/auth/verify/resend`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["body"],
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Sends a new email verification token if needed
   * Resend email verification
   */
  async resendVerification(
    requestParameters: ResendVerificationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.resendVerificationRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Exchanges a valid refresh token for a new access and refresh token, revoking the old one
   * Rotate refresh token
   */
  async rotateRefreshTokenRaw(
    requestParameters: RotateRefreshTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: string }>> {
    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling rotateRefreshToken().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    let urlPath = `/api/v1/auth/refresh/rotate`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["body"],
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Exchanges a valid refresh token for a new access and refresh token, revoking the old one
   * Rotate refresh token
   */
  async rotateRefreshToken(
    requestParameters: RotateRefreshTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: string }> {
    const response = await this.rotateRefreshTokenRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Verifies the user\'s email using a token (often from an emailed link)
   * Verify email address
   */
  async verifyEmailRaw(
    requestParameters: VerifyEmailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["token"] == null) {
      throw new runtime.RequiredError(
        "token",
        'Required parameter "token" was null or undefined when calling verifyEmail().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["token"] != null) {
      queryParameters["token"] = requestParameters["token"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/v1/auth/verify`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Verifies the user\'s email using a token (often from an emailed link)
   * Verify email address
   */
  async verifyEmail(
    requestParameters: VerifyEmailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.verifyEmailRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
