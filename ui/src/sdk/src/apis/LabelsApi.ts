/* tslint:disable */
/* eslint-disable */
/**
 * AutoGlue API
 * API for managing K3s clusters across cloud providers
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LabelsAddLabelToPoolRequest,
  LabelsCreateLabelRequest,
  LabelsLabelResponse,
  LabelsNodePoolBrief,
  LabelsUpdateLabelRequest,
} from '../models/index';
import {
    LabelsAddLabelToPoolRequestFromJSON,
    LabelsAddLabelToPoolRequestToJSON,
    LabelsCreateLabelRequestFromJSON,
    LabelsCreateLabelRequestToJSON,
    LabelsLabelResponseFromJSON,
    LabelsLabelResponseToJSON,
    LabelsNodePoolBriefFromJSON,
    LabelsNodePoolBriefToJSON,
    LabelsUpdateLabelRequestFromJSON,
    LabelsUpdateLabelRequestToJSON,
} from '../models/index';

export interface AddLabelToNodePoolRequest {
    xOrgID: string;
    id: string;
    body: LabelsAddLabelToPoolRequest;
    include?: string;
}

export interface CreateLabelRequest {
    xOrgID: string;
    body: LabelsCreateLabelRequest;
}

export interface DeleteLabelRequest {
    xOrgID: string;
    id: string;
}

export interface GetLabelRequest {
    xOrgID: string;
    id: string;
    include?: string;
}

export interface ListLabelsRequest {
    xOrgID: string;
    key?: string;
    value?: string;
    q?: string;
    include?: string;
}

export interface ListNodePoolsWithLabelRequest {
    xOrgID: string;
    id: string;
    q?: string;
}

export interface RemoveLabelFromNodePoolRequest {
    xOrgID: string;
    id: string;
    poolId: string;
}

export interface UpdateLabelRequest {
    xOrgID: string;
    id: string;
    body: LabelsUpdateLabelRequest;
}

/**
 * 
 */
export class LabelsApi extends runtime.BaseAPI {

    /**
     * Links the label to one or more node pools in the same organization.
     * Attach label to node pools (org scoped)
     */
    async addLabelToNodePoolRaw(requestParameters: AddLabelToNodePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelsLabelResponse>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling addLabelToNodePool().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addLabelToNodePool().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling addLabelToNodePool().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/labels/{id}/node_pools`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelsAddLabelToPoolRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelsLabelResponseFromJSON(jsonValue));
    }

    /**
     * Links the label to one or more node pools in the same organization.
     * Attach label to node pools (org scoped)
     */
    async addLabelToNodePool(requestParameters: AddLabelToNodePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelsLabelResponse> {
        const response = await this.addLabelToNodePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a label. Optionally link to node pools.
     * Create label (org scoped)
     */
    async createLabelRaw(requestParameters: CreateLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelsLabelResponse>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling createLabel().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createLabel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/labels`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelsCreateLabelRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelsLabelResponseFromJSON(jsonValue));
    }

    /**
     * Creates a label. Optionally link to node pools.
     * Create label (org scoped)
     */
    async createLabel(requestParameters: CreateLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelsLabelResponse> {
        const response = await this.createLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permanently deletes the label.
     * Delete label (org scoped)
     */
    async deleteLabelRaw(requestParameters: DeleteLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling deleteLabel().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteLabel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/labels/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Permanently deletes the label.
     * Delete label (org scoped)
     */
    async deleteLabel(requestParameters: DeleteLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns one label. Add `include=node_pools` to include node groups.
     * Get label by ID (org scoped)
     */
    async getLabelRaw(requestParameters: GetLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelsLabelResponse>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling getLabel().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getLabel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/labels/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelsLabelResponseFromJSON(jsonValue));
    }

    /**
     * Returns one label. Add `include=node_pools` to include node groups.
     * Get label by ID (org scoped)
     */
    async getLabel(requestParameters: GetLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelsLabelResponse> {
        const response = await this.getLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns node labels for the organization in X-Org-ID. Filters: `key`, `value`, and `q` (key contains). Add `include=node_pools` to include linked node groups.
     * List node labels (org scoped)
     */
    async listLabelsRaw(requestParameters: ListLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LabelsLabelResponse>>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling listLabels().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        if (requestParameters['value'] != null) {
            queryParameters['value'] = requestParameters['value'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/labels`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LabelsLabelResponseFromJSON));
    }

    /**
     * Returns node labels for the organization in X-Org-ID. Filters: `key`, `value`, and `q` (key contains). Add `include=node_pools` to include linked node groups.
     * List node labels (org scoped)
     */
    async listLabels(requestParameters: ListLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LabelsLabelResponse>> {
        const response = await this.listLabelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns node pools attached to the label. Supports `q` (name contains, case-insensitive).
     * List node pools linked to a label (org scoped)
     */
    async listNodePoolsWithLabelRaw(requestParameters: ListNodePoolsWithLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LabelsNodePoolBrief>>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling listNodePoolsWithLabel().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listNodePoolsWithLabel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/labels/{id}/node_pools`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LabelsNodePoolBriefFromJSON));
    }

    /**
     * Returns node pools attached to the label. Supports `q` (name contains, case-insensitive).
     * List node pools linked to a label (org scoped)
     */
    async listNodePoolsWithLabel(requestParameters: ListNodePoolsWithLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LabelsNodePoolBrief>> {
        const response = await this.listNodePoolsWithLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unlinks the label from the specified node pool.
     * Detach label from a node pool (org scoped)
     */
    async removeLabelFromNodePoolRaw(requestParameters: RemoveLabelFromNodePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling removeLabelFromNodePool().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeLabelFromNodePool().'
            );
        }

        if (requestParameters['poolId'] == null) {
            throw new runtime.RequiredError(
                'poolId',
                'Required parameter "poolId" was null or undefined when calling removeLabelFromNodePool().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/labels/{id}/node_pools/{poolId}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"poolId"}}`, encodeURIComponent(String(requestParameters['poolId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Unlinks the label from the specified node pool.
     * Detach label from a node pool (org scoped)
     */
    async removeLabelFromNodePool(requestParameters: RemoveLabelFromNodePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.removeLabelFromNodePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update label fields.
     * Update label (org scoped)
     */
    async updateLabelRaw(requestParameters: UpdateLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelsLabelResponse>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling updateLabel().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateLabel().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateLabel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/labels/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LabelsUpdateLabelRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelsLabelResponseFromJSON(jsonValue));
    }

    /**
     * Partially update label fields.
     * Update label (org scoped)
     */
    async updateLabel(requestParameters: UpdateLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelsLabelResponse> {
        const response = await this.updateLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
