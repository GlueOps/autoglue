/* tslint:disable */
/* eslint-disable */
/**
 * AutoGlue API
 * API for managing K3s clusters across cloud providers
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthnAdminCreateUserRequest,
  AuthnAdminUpdateUserRequest,
  AuthnListUsersOut,
  AuthnUserOut,
} from '../models/index';
import {
    AuthnAdminCreateUserRequestFromJSON,
    AuthnAdminCreateUserRequestToJSON,
    AuthnAdminUpdateUserRequestFromJSON,
    AuthnAdminUpdateUserRequestToJSON,
    AuthnListUsersOutFromJSON,
    AuthnListUsersOutToJSON,
    AuthnUserOutFromJSON,
    AuthnUserOutToJSON,
} from '../models/index';

export interface AdminCreateUserRequest {
    body: AuthnAdminCreateUserRequest;
}

export interface AdminDeleteUserRequest {
    userId: string;
}

export interface AdminListUsersRequest {
    page?: number;
    pageSize?: number;
}

export interface AdminUpdateUserRequest {
    userId: string;
    body: AuthnAdminUpdateUserRequest;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Admin: create user
     */
    async adminCreateUserRaw(requestParameters: AdminCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthnUserOut>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling adminCreateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/admin/users`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthnAdminCreateUserRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthnUserOutFromJSON(jsonValue));
    }

    /**
     * Admin: create user
     */
    async adminCreateUser(requestParameters: AdminCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthnUserOut> {
        const response = await this.adminCreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Admin: delete user
     */
    async adminDeleteUserRaw(requestParameters: AdminDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/admin/users/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Admin: delete user
     */
    async adminDeleteUser(requestParameters: AdminDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.adminDeleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns paginated list of users (admin only)
     * Admin: list all users
     */
    async adminListUsersRaw(requestParameters: AdminListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthnListUsersOut>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/admin/users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthnListUsersOutFromJSON(jsonValue));
    }

    /**
     * Returns paginated list of users (admin only)
     * Admin: list all users
     */
    async adminListUsers(requestParameters: AdminListUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthnListUsersOut> {
        const response = await this.adminListUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Admin: update user
     */
    async adminUpdateUserRaw(requestParameters: AdminUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthnUserOut>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminUpdateUser().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling adminUpdateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/admin/users/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AuthnAdminUpdateUserRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthnUserOutFromJSON(jsonValue));
    }

    /**
     * Admin: update user
     */
    async adminUpdateUser(requestParameters: AdminUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthnUserOut> {
        const response = await this.adminUpdateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
