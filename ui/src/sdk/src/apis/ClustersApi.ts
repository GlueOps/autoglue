/* tslint:disable */
/* eslint-disable */
/**
 * AutoGlue API
 * API for managing K3s clusters across cloud providers
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClustersAttachNodePoolsRequest,
  ClustersClusterResponse,
  ClustersCreateClusterRequest,
  ClustersNodePoolBrief,
  ClustersServerBrief,
  ClustersSetBastionRequest,
  ClustersUpdateClusterRequest,
} from '../models/index';
import {
    ClustersAttachNodePoolsRequestFromJSON,
    ClustersAttachNodePoolsRequestToJSON,
    ClustersClusterResponseFromJSON,
    ClustersClusterResponseToJSON,
    ClustersCreateClusterRequestFromJSON,
    ClustersCreateClusterRequestToJSON,
    ClustersNodePoolBriefFromJSON,
    ClustersNodePoolBriefToJSON,
    ClustersServerBriefFromJSON,
    ClustersServerBriefToJSON,
    ClustersSetBastionRequestFromJSON,
    ClustersSetBastionRequestToJSON,
    ClustersUpdateClusterRequestFromJSON,
    ClustersUpdateClusterRequestToJSON,
} from '../models/index';

export interface AttachNodePoolsRequest {
    xOrgID: string;
    id: string;
    body: ClustersAttachNodePoolsRequest;
}

export interface CreateClusterRequest {
    xOrgID: string;
    body: ClustersCreateClusterRequest;
}

export interface DeleteBastionRequest {
    xOrgID: string;
    id: string;
}

export interface DeleteClusterRequest {
    xOrgID: string;
    id: string;
}

export interface DetachNodePoolRequest {
    xOrgID: string;
    id: string;
    poolId: string;
}

export interface GetBastionRequest {
    xOrgID: string;
    id: string;
}

export interface GetClusterRequest {
    xOrgID: string;
    id: string;
    include?: string;
}

export interface ListClusterNodePoolsRequest {
    xOrgID: string;
    id: string;
    q?: string;
}

export interface ListClustersRequest {
    xOrgID: string;
    q?: string;
    include?: string;
}

export interface PutBastionRequest {
    xOrgID: string;
    id: string;
    body: ClustersSetBastionRequest;
}

export interface UpdateClusterRequest {
    xOrgID: string;
    id: string;
    body: ClustersUpdateClusterRequest;
}

/**
 * 
 */
export class ClustersApi extends runtime.BaseAPI {

    /**
     * Attach node pools to cluster (org scoped)
     */
    async attachNodePoolsRaw(requestParameters: AttachNodePoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling attachNodePools().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling attachNodePools().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling attachNodePools().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/clusters/{id}/node_pools`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClustersAttachNodePoolsRequestToJSON(requestParameters['body']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Attach node pools to cluster (org scoped)
     */
    async attachNodePools(requestParameters: AttachNodePoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.attachNodePoolsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a cluster and optionally links node pools and a bastion server. If `kubeconfig` is provided, it will be encrypted per-organization and stored securely (never returned).
     * Create cluster (org scoped)
     */
    async createClusterRaw(requestParameters: CreateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClustersClusterResponse>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling createCluster().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createCluster().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/clusters`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClustersCreateClusterRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClustersClusterResponseFromJSON(jsonValue));
    }

    /**
     * Creates a cluster and optionally links node pools and a bastion server. If `kubeconfig` is provided, it will be encrypted per-organization and stored securely (never returned).
     * Create cluster (org scoped)
     */
    async createCluster(requestParameters: CreateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClustersClusterResponse> {
        const response = await this.createClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clear cluster bastion (org scoped)
     */
    async deleteBastionRaw(requestParameters: DeleteBastionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling deleteBastion().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteBastion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/clusters/{id}/bastion`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Clear cluster bastion (org scoped)
     */
    async deleteBastion(requestParameters: DeleteBastionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteBastionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete cluster (org scoped)
     */
    async deleteClusterRaw(requestParameters: DeleteClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling deleteCluster().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteCluster().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/clusters/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete cluster (org scoped)
     */
    async deleteCluster(requestParameters: DeleteClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach one node pool from a cluster (org scoped)
     */
    async detachNodePoolRaw(requestParameters: DetachNodePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling detachNodePool().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling detachNodePool().'
            );
        }

        if (requestParameters['poolId'] == null) {
            throw new runtime.RequiredError(
                'poolId',
                'Required parameter "poolId" was null or undefined when calling detachNodePool().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/clusters/{id}/node_pools/{poolId}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"poolId"}}`, encodeURIComponent(String(requestParameters['poolId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Detach one node pool from a cluster (org scoped)
     */
    async detachNodePool(requestParameters: DetachNodePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.detachNodePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cluster bastion (org scoped)
     */
    async getBastionRaw(requestParameters: GetBastionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClustersServerBrief>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling getBastion().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBastion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/clusters/{id}/bastion`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClustersServerBriefFromJSON(jsonValue));
    }

    /**
     * Get cluster bastion (org scoped)
     */
    async getBastion(requestParameters: GetBastionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClustersServerBrief> {
        const response = await this.getBastionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns one cluster. Add `include=node_pools,bastion` to expand.
     * Get cluster by ID (org scoped)
     */
    async getClusterRaw(requestParameters: GetClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClustersClusterResponse>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling getCluster().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getCluster().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/clusters/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClustersClusterResponseFromJSON(jsonValue));
    }

    /**
     * Returns one cluster. Add `include=node_pools,bastion` to expand.
     * Get cluster by ID (org scoped)
     */
    async getCluster(requestParameters: GetClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClustersClusterResponse> {
        const response = await this.getClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List node pools attached to a cluster (org scoped)
     */
    async listClusterNodePoolsRaw(requestParameters: ListClusterNodePoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClustersNodePoolBrief>>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling listClusterNodePools().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listClusterNodePools().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/clusters/{id}/node_pools`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClustersNodePoolBriefFromJSON));
    }

    /**
     * List node pools attached to a cluster (org scoped)
     */
    async listClusterNodePools(requestParameters: ListClusterNodePoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClustersNodePoolBrief>> {
        const response = await this.listClusterNodePoolsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns clusters for the organization in X-Org-ID. Add `include=node_pools,bastion` to expand. Filter by `q` (name contains).
     * List clusters (org scoped)
     */
    async listClustersRaw(requestParameters: ListClustersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClustersClusterResponse>>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling listClusters().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/clusters`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClustersClusterResponseFromJSON));
    }

    /**
     * Returns clusters for the organization in X-Org-ID. Add `include=node_pools,bastion` to expand. Filter by `q` (name contains).
     * List clusters (org scoped)
     */
    async listClusters(requestParameters: ListClustersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClustersClusterResponse>> {
        const response = await this.listClustersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set/replace cluster bastion (org scoped)
     */
    async putBastionRaw(requestParameters: PutBastionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling putBastion().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putBastion().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling putBastion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/clusters/{id}/bastion`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClustersSetBastionRequestToJSON(requestParameters['body']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set/replace cluster bastion (org scoped)
     */
    async putBastion(requestParameters: PutBastionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.putBastionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update cluster (org scoped). If `kubeconfig` is provided and non-empty, it will be encrypted per-organization and stored (never returned). Sending an empty string for `kubeconfig` is ignored (no change).
     */
    async updateClusterRaw(requestParameters: UpdateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClustersClusterResponse>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling updateCluster().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateCluster().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateCluster().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/clusters/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ClustersUpdateClusterRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClustersClusterResponseFromJSON(jsonValue));
    }

    /**
     * Update cluster (org scoped). If `kubeconfig` is provided and non-empty, it will be encrypted per-organization and stored (never returned). Sending an empty string for `kubeconfig` is ignored (no change).
     */
    async updateCluster(requestParameters: UpdateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClustersClusterResponse> {
        const response = await this.updateClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
