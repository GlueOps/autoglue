/* tslint:disable */
/* eslint-disable */
/**
 * AutoGlue API
 * API for managing K3s clusters across cloud providers
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TaintsAddTaintToPoolRequest,
  TaintsCreateTaintRequest,
  TaintsNodePoolResponse,
  TaintsTaintResponse,
  TaintsUpdateTaintRequest,
} from '../models/index';
import {
    TaintsAddTaintToPoolRequestFromJSON,
    TaintsAddTaintToPoolRequestToJSON,
    TaintsCreateTaintRequestFromJSON,
    TaintsCreateTaintRequestToJSON,
    TaintsNodePoolResponseFromJSON,
    TaintsNodePoolResponseToJSON,
    TaintsTaintResponseFromJSON,
    TaintsTaintResponseToJSON,
    TaintsUpdateTaintRequestFromJSON,
    TaintsUpdateTaintRequestToJSON,
} from '../models/index';

export interface AddTaintToNodePoolRequest {
    xOrgID: string;
    id: string;
    body: TaintsAddTaintToPoolRequest;
    include?: string;
}

export interface CreateTaintRequest {
    xOrgID: string;
    body: TaintsCreateTaintRequest;
}

export interface DeleteTaintRequest {
    xOrgID: string;
    id: string;
}

export interface GetTaintRequest {
    xOrgID: string;
    id: string;
    include?: string;
}

export interface ListNodePoolsWithTaintRequest {
    xOrgID: string;
    id: string;
    q?: string;
}

export interface ListTaintsRequest {
    xOrgID: string;
    key?: string;
    value?: string;
    q?: string;
    include?: string;
}

export interface RemoveTaintFromNodePoolRequest {
    xOrgID: string;
    id: string;
    poolId: string;
}

export interface UpdateTaintRequest {
    xOrgID: string;
    id: string;
    body: TaintsUpdateTaintRequest;
}

/**
 * 
 */
export class TaintsApi extends runtime.BaseAPI {

    /**
     * Links the taint to one or more node pools in the same organization.
     * Attach taint to node pools (org scoped)
     */
    async addTaintToNodePoolRaw(requestParameters: AddTaintToNodePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaintsTaintResponse>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling addTaintToNodePool().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addTaintToNodePool().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling addTaintToNodePool().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/taints/{id}/node_pools`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaintsAddTaintToPoolRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaintsTaintResponseFromJSON(jsonValue));
    }

    /**
     * Links the taint to one or more node pools in the same organization.
     * Attach taint to node pools (org scoped)
     */
    async addTaintToNodePool(requestParameters: AddTaintToNodePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaintsTaintResponse> {
        const response = await this.addTaintToNodePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a taint. Optionally link to node pools.
     * Create node taint (org scoped)
     */
    async createTaintRaw(requestParameters: CreateTaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaintsTaintResponse>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling createTaint().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createTaint().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/taints`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaintsCreateTaintRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaintsTaintResponseFromJSON(jsonValue));
    }

    /**
     * Creates a taint. Optionally link to node pools.
     * Create node taint (org scoped)
     */
    async createTaint(requestParameters: CreateTaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaintsTaintResponse> {
        const response = await this.createTaintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permanently deletes the taint.
     * Delete taint (org scoped)
     */
    async deleteTaintRaw(requestParameters: DeleteTaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling deleteTaint().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTaint().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/taints/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Permanently deletes the taint.
     * Delete taint (org scoped)
     */
    async deleteTaint(requestParameters: DeleteTaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteTaintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns one taint. Add `include=node_pools` to include node pools.
     * Get node taint by ID (org scoped)
     */
    async getTaintRaw(requestParameters: GetTaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaintsTaintResponse>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling getTaint().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTaint().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/taints/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaintsTaintResponseFromJSON(jsonValue));
    }

    /**
     * Returns one taint. Add `include=node_pools` to include node pools.
     * Get node taint by ID (org scoped)
     */
    async getTaint(requestParameters: GetTaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaintsTaintResponse> {
        const response = await this.getTaintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns node pools attached to the taint. Supports `q` (name contains, case-insensitive).
     * List node pools linked to a taint (org scoped)
     */
    async listNodePoolsWithTaintRaw(requestParameters: ListNodePoolsWithTaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaintsNodePoolResponse>>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling listNodePoolsWithTaint().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listNodePoolsWithTaint().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/taints/{id}/node_pools`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaintsNodePoolResponseFromJSON));
    }

    /**
     * Returns node pools attached to the taint. Supports `q` (name contains, case-insensitive).
     * List node pools linked to a taint (org scoped)
     */
    async listNodePoolsWithTaint(requestParameters: ListNodePoolsWithTaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaintsNodePoolResponse>> {
        const response = await this.listNodePoolsWithTaintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns node taints for the organization in X-Org-ID. Filters: `key`, `value`, and `q` (key contains). Add `include=node_pools` to include linked node pools.
     * List node taints (org scoped)
     */
    async listTaintsRaw(requestParameters: ListTaintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaintsTaintResponse>>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling listTaints().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        if (requestParameters['value'] != null) {
            queryParameters['value'] = requestParameters['value'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/taints`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaintsTaintResponseFromJSON));
    }

    /**
     * Returns node taints for the organization in X-Org-ID. Filters: `key`, `value`, and `q` (key contains). Add `include=node_pools` to include linked node pools.
     * List node taints (org scoped)
     */
    async listTaints(requestParameters: ListTaintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaintsTaintResponse>> {
        const response = await this.listTaintsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unlinks the taint from the specified node pool.
     * Detach taint from a node pool (org scoped)
     */
    async removeTaintFromNodePoolRaw(requestParameters: RemoveTaintFromNodePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling removeTaintFromNodePool().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeTaintFromNodePool().'
            );
        }

        if (requestParameters['poolId'] == null) {
            throw new runtime.RequiredError(
                'poolId',
                'Required parameter "poolId" was null or undefined when calling removeTaintFromNodePool().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/taints/{id}/node_pools/{poolId}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"poolId"}}`, encodeURIComponent(String(requestParameters['poolId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Unlinks the taint from the specified node pool.
     * Detach taint from a node pool (org scoped)
     */
    async removeTaintFromNodePool(requestParameters: RemoveTaintFromNodePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.removeTaintFromNodePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update taint fields.
     * Update node taint (org scoped)
     */
    async updateTaintRaw(requestParameters: UpdateTaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaintsTaintResponse>> {
        if (requestParameters['xOrgID'] == null) {
            throw new runtime.RequiredError(
                'xOrgID',
                'Required parameter "xOrgID" was null or undefined when calling updateTaint().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTaint().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateTaint().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xOrgID'] != null) {
            headerParameters['X-Org-ID'] = String(requestParameters['xOrgID']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/api/v1/taints/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TaintsUpdateTaintRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaintsTaintResponseFromJSON(jsonValue));
    }

    /**
     * Partially update taint fields.
     * Update node taint (org scoped)
     */
    async updateTaint(requestParameters: UpdateTaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaintsTaintResponse> {
        const response = await this.updateTaintRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
