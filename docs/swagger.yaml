basePath: /
definitions:
  authentication.AuthClaimsDTO:
    properties:
      aud:
        items:
          type: string
        type: array
      exp:
        type: integer
      iat:
        type: integer
      iss:
        type: string
      nbf:
        type: integer
      orgs:
        items:
          type: string
        type: array
      roles:
        items:
          type: string
        type: array
      sub:
        type: string
    type: object
  authentication.LoginInput:
    properties:
      email:
        example: me@here.com
        type: string
      password:
        example: "123456"
        type: string
    type: object
  authentication.MeResponse:
    properties:
      claims:
        $ref: '#/definitions/authentication.AuthClaimsDTO'
      org_role:
        type: string
      organization_id:
        type: string
      user_id:
        type: string
    type: object
  authentication.RegisterInput:
    properties:
      email:
        example: me@here.com
        type: string
      name:
        example: My Name
        type: string
      password:
        example: "123456"
        type: string
    type: object
  clusters.clusterResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      kubeconfig:
        type: string
      name:
        type: string
      node_groups:
        items:
          $ref: '#/definitions/clusters.nodeGroupBrief'
        type: array
      provider:
        type: string
      region:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  clusters.createClusterRequest:
    properties:
      kubeconfig:
        type: string
      name:
        type: string
      node_group_ids:
        description: 'CHANGED: node groups'
        items:
          type: string
        type: array
      provider:
        type: string
      region:
        type: string
      status:
        type: string
    type: object
  clusters.nodeGroupBrief:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  clusters.nodeGroupIds:
    properties:
      node_group_ids:
        items:
          type: string
        type: array
    type: object
  clusters.updateClusterRequest:
    properties:
      kubeconfig:
        type: string
      name:
        type: string
      provider:
        type: string
      region:
        type: string
      status:
        type: string
    type: object
  credentials.createCredentialRequest:
    properties:
      plaintext:
        description: |-
          Secret material in plaintext; will be encrypted at rest
          required: true
        type: string
      provider:
        description: |-
          Provider name (e.g., "aws", "gitlab")
          required: true
        type: string
    type: object
  credentials.credentialResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      organization_id:
        type: string
      provider:
        type: string
      updated_at:
        type: string
    type: object
  credentials.credentialRevealResponse:
    properties:
      created_at:
        type: string
      decrypted:
        description: Decrypted plaintext (only when ?reveal=true)
        type: string
      id:
        type: string
      organization_id:
        type: string
      provider:
        type: string
      updated_at:
        type: string
    type: object
  credentials.updateCredentialRequest:
    properties:
      plaintext:
        type: string
      provider:
        type: string
    type: object
  models.Member:
    properties:
      created_at:
        type: string
      id:
        type: string
      organization:
        $ref: '#/definitions/models.Organization'
      organization_id:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.MemberRole'
        description: e.g. admin, member
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.MemberRole:
    enum:
    - admin
    - member
    - user
    type: string
    x-enum-varnames:
    - MemberRoleAdmin
    - MemberRoleMember
    - MemberRoleUser
  models.Organization:
    properties:
      created_at:
        type: string
      id:
        type: string
      logo:
        type: string
      metadata:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    type: object
  models.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      updated_at:
        type: string
    type: object
  nodelabels.attachNodeGroupsRequest:
    properties:
      node_group_ids:
        items:
          type: string
        type: array
    type: object
  nodelabels.createLabelRequest:
    properties:
      name:
        type: string
      node_group_ids:
        items:
          type: string
        type: array
      value:
        type: string
    type: object
  nodelabels.labelResponse:
    properties:
      id:
        type: string
      name:
        type: string
      node_groups:
        description: Present if include=node_groups
        items:
          $ref: '#/definitions/nodelabels.nodeGroupBrief'
        type: array
      value:
        type: string
    type: object
  nodelabels.nodeGroupBrief:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  nodelabels.updateLabelRequest:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  nodepools.attachServersRequest:
    properties:
      server_ids:
        items:
          type: string
        type: array
    type: object
  nodepools.createNodePoolRequest:
    properties:
      name:
        type: string
      server_ids:
        description: optional initial servers
        items:
          type: string
        type: array
    type: object
  nodepools.nodePoolResponse:
    properties:
      id:
        type: string
      name:
        type: string
      servers:
        items:
          $ref: '#/definitions/nodepools.serverBrief'
        type: array
    type: object
  nodepools.serverBrief:
    properties:
      hostname:
        type: string
      id:
        type: string
      ip:
        type: string
      role:
        type: string
      status:
        type: string
    type: object
  nodepools.updateNodePoolRequest:
    properties:
      name:
        type: string
    type: object
  nodetaints.createTaintRequest:
    properties:
      name:
        type: string
      node_group_ids:
        items:
          type: string
        type: array
      value:
        type: string
    type: object
  nodetaints.nodeGroupBrief:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  nodetaints.taintResponse:
    properties:
      id:
        type: string
      name:
        type: string
      node_groups:
        items:
          $ref: '#/definitions/nodetaints.nodeGroupBrief'
        type: array
      value:
        type: string
    type: object
  nodetaints.updateTaintRequest:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  orgs.InviteInput:
    properties:
      email:
        type: string
      role:
        type: string
    type: object
  orgs.JoinInput:
    properties:
      invitation_id:
        type: string
    type: object
  orgs.OrgInput:
    properties:
      name:
        type: string
      slug:
        type: string
    type: object
  orgs.SwitchOrgInput:
    properties:
      organization_id:
        type: string
    type: object
  orgs.UpdateOrgInput:
    properties:
      name:
        type: string
      slug:
        type: string
    type: object
  servers.createServerRequest:
    properties:
      hostname:
        description: |-
          Optional hostname
          example: worker-01
        type: string
      ip_address:
        description: |-
          IPv4/IPv6 address
          required: true
          example: 10.0.1.23
        type: string
      role:
        description: |-
          Role for this server (e.g., master, worker, bastion)
          required: true
          example: worker
        example: master|worker|bastion
        type: string
      ssh_key_id:
        description: |-
          SSH key ID to use (must belong to the same org)
          required: true
          example: 2a1b9a6e-6fda-4e4b-8f80-0a3f8e0b8e4e
        type: string
      ssh_user:
        description: |-
          SSH login user
          required: true
          example: ubuntu
        type: string
      status:
        description: |-
          Optional initial status (defaults to "pending")
          enum: pending,provisioning,ready,failed
          example: pending
        example: pending|provisioning|ready|failed
        type: string
    type: object
  servers.serverResponse:
    properties:
      created_at:
        type: string
      hostname:
        type: string
      id:
        type: string
      ip_address:
        type: string
      organization_id:
        type: string
      role:
        type: string
      ssh_key_id:
        type: string
      ssh_user:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  servers.updateServerRequest:
    properties:
      hostname:
        type: string
      ip_address:
        type: string
      role:
        example: master|worker|bastion
        type: string
      ssh_key_id:
        type: string
      ssh_user:
        type: string
      status:
        description: 'enum: pending,provisioning,ready,failed'
        example: pending|provisioning|ready|failed
        type: string
    type: object
  ssh.createSSHRequest:
    properties:
      bits:
        description: |-
          RSA key size in bits. Allowed: 2048, 3072, 4096. Default: 4096
          example: 4096
        example: 4096
        type: integer
      comment:
        description: |-
          Optional comment appended to the authorized_keys string
          example: deploy@autoglue
        example: deploy@autoglue
        type: string
      download:
        description: |-
          Optional immediate download: "none" (default), "public", "private", "both"
          example: none
        example: both
        type: string
      name:
        type: string
    type: object
  ssh.sshResponse:
    properties:
      created_at:
        type: string
      fingerprint:
        type: string
      id:
        type: string
      name:
        type: string
      organization_id:
        type: string
      public_keys:
        type: string
      updated_at:
        type: string
    type: object
  ssh.sshRevealResponse:
    properties:
      created_at:
        type: string
      fingerprint:
        type: string
      id:
        type: string
      name:
        type: string
      organization_id:
        type: string
      private_key:
        description: Private key in PEM format (revealed only when requested)
        type: string
      public_keys:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: API for managing K3s clusters across cloud providers
  title: AutoGlue API
  version: "1.0"
paths:
  /api/healthz:
    get:
      consumes:
      - application/json
      description: Returns a 200 if the service is up
      produces:
      - text/plain
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Basic health check
      tags:
      - health
  /api/v1/authentication/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT bearer token
      parameters:
      - description: User login input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authentication.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: unauthorized
          schema:
            type: string
      summary: Authenticate and return a token
      tags:
      - auth
  /api/v1/authentication/logout:
    post:
      consumes:
      - application/json
      description: Revoke a refresh token
      parameters:
      - description: refresh_token
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - text/plain
      responses:
        "204":
          description: no content
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /api/v1/authentication/me:
    get:
      description: Returns details from the authenticated context
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.MeResponse'
        "401":
          description: unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get authenticated user info
      tags:
      - auth
  /api/v1/authentication/refresh:
    post:
      consumes:
      - application/json
      description: Use a refresh token to obtain a new access token
      parameters:
      - description: refresh_token
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: new access token
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Refresh access token
      tags:
      - auth
  /api/v1/authentication/register:
    post:
      consumes:
      - application/json
      description: Registers a new user and stores credentials
      parameters:
      - description: User registration input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authentication.RegisterInput'
      produces:
      - text/plain
      responses:
        "201":
          description: created
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
      summary: Register a new user
      tags:
      - auth
  /api/v1/clusters:
    get:
      consumes:
      - application/json
      description: List clusters for the organization in X-Org-ID. Use `provider`,
        `region`, `status`, and `q` (name contains). Add `include=node_groups` to
        include attached servers.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Filter by provider
        in: query
        name: provider
        type: string
      - description: Filter by region
        in: query
        name: region
        type: string
      - description: Filter by status (provisioning|ready|failed)
        in: query
        name: status
        type: string
      - description: Name contains (case-insensitive)
        in: query
        name: q
        type: string
      - description: 'Optional: servers'
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/clusters.clusterResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: failed to list clusters
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List clusters (org scoped)
      tags:
      - clusters
    post:
      consumes:
      - application/json
      description: Creates a cluster and optionally attaches initial servers. If kubeconfig
        is provided, it is encrypted at rest.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Cluster payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/clusters.createClusterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/clusters.clusterResponse'
        "400":
          description: invalid json / invalid status / invalid server_ids
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: create failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create cluster (org scoped)
      tags:
      - clusters
  /api/v1/clusters/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes the cluster (associated links are removed;
        servers remain).
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Cluster ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: delete failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete cluster (org scoped)
      tags:
      - clusters
    get:
      consumes:
      - application/json
      description: Returns one cluster. Add `include=servers` to include servers.
        Add `reveal_kubeconfig=true` to include decrypted kubeconfig.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Cluster ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: 'Optional: servers'
        in: query
        name: include
        type: string
      - description: Reveal decrypted kubeconfig
        in: query
        name: reveal_kubeconfig
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/clusters.clusterResponse'
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: fetch/decrypt failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get cluster by ID (org scoped)
      tags:
      - clusters
    patch:
      consumes:
      - application/json
      description: Partially update cluster fields. If kubeconfig is provided, it
        is encrypted at rest. Provide empty string to clear stored kubeconfig.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Cluster ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/clusters.updateClusterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/clusters.clusterResponse'
        "400":
          description: invalid id / invalid json / invalid status
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: update failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update cluster (org scoped)
      tags:
      - clusters
  /api/v1/clusters/{id}/node-groups:
    get:
      consumes:
      - application/json
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Cluster ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/clusters.nodeGroupBrief'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List node groups attached to a cluster (org scoped)
      tags:
      - clusters
    post:
      consumes:
      - application/json
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Cluster ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Node Group IDs to attach
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/clusters.nodeGroupIds'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Attach node groups to a cluster (org scoped)
      tags:
      - clusters
  /api/v1/clusters/{id}/node-groups/{nodeGroupId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Cluster ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Node Group ID (UUID)
        in: path
        name: nodeGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Detach one node group from a cluster (org scoped)
      tags:
      - clusters
  /api/v1/credentials:
    get:
      consumes:
      - application/json
      description: Returns redacted credentials for the organization in X-Org-ID.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/credentials.credentialResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: failed to list credentials
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List credentials (org scoped)
      tags:
      - credentials
    post:
      consumes:
      - application/json
      description: Encrypts and stores plaintext for the org given by X-Org-ID.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Credential payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/credentials.createCredentialRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/credentials.credentialResponse'
        "400":
          description: invalid json / missing fields
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: encryption/create failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create credential (org scoped)
      tags:
      - credentials
  /api/v1/credentials/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes the credential.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Credential ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: delete failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete credential (org scoped)
      tags:
      - credentials
    get:
      consumes:
      - application/json
      description: Redacted by default. Append `?reveal=true` to include decrypted
        value.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Credential ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Reveal decrypted secret (requires authorization)
        in: query
        name: reveal
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: When reveal=true
          schema:
            $ref: '#/definitions/credentials.credentialRevealResponse'
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: failed to fetch/decrypt
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get credential by ID (org scoped)
      tags:
      - credentials
    patch:
      consumes:
      - application/json
      description: Patch provider and/or rotate secret by supplying plaintext.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Credential ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/credentials.updateCredentialRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/credentials.credentialResponse'
        "400":
          description: invalid id / invalid json
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: encryption/update failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update credential (org scoped)
      tags:
      - credentials
  /api/v1/node-labels:
    get:
      consumes:
      - application/json
      description: 'Returns node labels for the organization in X-Org-ID. Filters:
        `name`, `value`, and `q` (name contains). Add `include=node_groups` to include
        linked node groups.'
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Exact name
        in: query
        name: name
        type: string
      - description: Exact value
        in: query
        name: value
        type: string
      - description: Name contains (case-insensitive)
        in: query
        name: q
        type: string
      - description: 'Optional: node_groups'
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/nodelabels.labelResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: failed to list node labels
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List node labels (org scoped)
      tags:
      - node-labels
    post:
      consumes:
      - application/json
      description: Creates a label. Optionally link to node groups.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Label payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/nodelabels.createLabelRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/nodelabels.labelResponse'
        "400":
          description: invalid json / missing fields / invalid node_group_ids
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: create failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create node label (org scoped)
      tags:
      - node-labels
  /api/v1/node-labels/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes the label.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Label ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: delete failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete node label (org scoped)
      tags:
      - node-labels
    get:
      consumes:
      - application/json
      description: Returns one label. Add `include=node_groups` to include node groups.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Label ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: 'Optional: node_groups'
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodelabels.labelResponse'
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: fetch failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get node label by ID (org scoped)
      tags:
      - node-labels
    patch:
      consumes:
      - application/json
      description: Partially update label fields.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Label ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/nodelabels.updateLabelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodelabels.labelResponse'
        "400":
          description: invalid id / invalid json
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: update failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update node label (org scoped)
      tags:
      - node-labels
  /api/v1/node-labels/{id}/node-groups:
    get:
      consumes:
      - application/json
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Label ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/nodelabels.nodeGroupBrief'
            type: array
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: fetch failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List node groups linked to a label (org scoped)
      tags:
      - node-labels
    post:
      consumes:
      - application/json
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Label ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Node Group IDs to attach
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/nodelabels.attachNodeGroupsRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: invalid id / invalid node_group_ids
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: attach failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Attach node groups to a label (org scoped)
      tags:
      - node-labels
  /api/v1/node-labels/{id}/node-groups/{nodeGroupId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Label ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Node Group ID (UUID)
        in: path
        name: nodeGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: detach failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Detach one node group from a label (org scoped)
      tags:
      - node-labels
  /api/v1/node-pools:
    get:
      consumes:
      - application/json
      description: Returns node pools for the organization in X-Org-ID. Add `include=servers`
        to include attached servers. Filter by `q` (name contains).
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Name contains (case-insensitive)
        in: query
        name: q
        type: string
      - description: 'Optional: servers'
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/nodepools.nodePoolResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: failed to list node groups
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List node pools (org scoped)
      tags:
      - node-pools
    post:
      consumes:
      - application/json
      description: Creates a node group. Optionally attach initial servers.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: NodeGroup payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/nodepools.createNodePoolRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/nodepools.nodePoolResponse'
        "400":
          description: invalid json / missing fields / invalid server_ids
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: create failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create node group (org scoped)
      tags:
      - node-pools
  /api/v1/node-pools/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes the node group.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Group ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: delete failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete node group (org scoped)
      tags:
      - node-pools
    get:
      consumes:
      - application/json
      description: Returns one node group. Add `include=servers` to include servers.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Group ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: 'Optional: servers'
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodepools.nodePoolResponse'
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: fetch failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get node group by ID (org scoped)
      tags:
      - node-pools
    patch:
      consumes:
      - application/json
      description: Partially update node group fields.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Group ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/nodepools.updateNodePoolRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodepools.nodePoolResponse'
        "400":
          description: invalid id / invalid json
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: update failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update node group (org scoped)
      tags:
      - node-pools
  /api/v1/node-pools/{id}/servers:
    get:
      consumes:
      - application/json
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Group ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/nodepools.serverBrief'
            type: array
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: fetch failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List servers attached to a node group (org scoped)
      tags:
      - node-pools
    post:
      consumes:
      - application/json
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Group ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Server IDs to attach
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/nodepools.attachServersRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: invalid id / invalid server_ids
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: attach failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Attach servers to a node group (org scoped)
      tags:
      - node-pools
  /api/v1/node-pools/{id}/servers/{serverId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Group ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Server ID (UUID)
        in: path
        name: serverId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: detach failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Detach one server from a node group (org scoped)
      tags:
      - node-pools
  /api/v1/node-taints:
    get:
      consumes:
      - application/json
      description: 'Returns node taints for the organization in X-Org-ID. Filters:
        `name`, `value`, and `q` (name contains). Add `include=node_groups` to include
        linked node groups.'
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Exact name
        in: query
        name: name
        type: string
      - description: Exact value
        in: query
        name: value
        type: string
      - description: Name contains (case-insensitive)
        in: query
        name: q
        type: string
      - description: 'Optional: node_groups'
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/nodetaints.taintResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: failed to list node taints
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List node taints (org scoped)
      tags:
      - node-taints
    post:
      consumes:
      - application/json
      description: Creates a taint. Optionally link to node groups.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Taint payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/nodetaints.createTaintRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/nodetaints.taintResponse'
        "400":
          description: invalid json / missing fields / invalid node_group_ids
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: create failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create node taint (org scoped)
      tags:
      - node-taints
  /api/v1/node-taints/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes the taint.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Taint ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: delete failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete node taint (org scoped)
      tags:
      - node-taints
    get:
      consumes:
      - application/json
      description: Returns one taint. Add `include=node_groups` to include node groups.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Taint ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: 'Optional: node_groups'
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodetaints.taintResponse'
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: fetch failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get node taint by ID (org scoped)
      tags:
      - node-taints
    patch:
      consumes:
      - application/json
      description: Partially update taint fields.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Node Taint ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/nodetaints.updateTaintRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodetaints.taintResponse'
        "400":
          description: invalid id / invalid json
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: update failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update node taint (org scoped)
      tags:
      - node-taints
  /api/v1/orgs:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Organization'
            type: array
        "401":
          description: unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List organizations for user
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Creates a new organization and assigns the authenticated user as
        an admin member
      parameters:
      - description: Optional organization context (ignored for creation)
        in: header
        name: X-Org-ID
        type: string
      - description: Organization Input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/orgs.OrgInput'
      produces:
      - application/json
      responses:
        "200":
          description: organization_id
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: invalid input
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
        "500":
          description: internal error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new organization
      tags:
      - organizations
  /api/v1/orgs/{orgId}:
    delete:
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      responses:
        "204":
          description: deleted
          schema:
            type: string
        "403":
          description: forbidden
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete organization
      tags:
      - organizations
    patch:
      consumes:
      - application/json
      parameters:
      - description: Org ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Organization data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/orgs.UpdateOrgInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Organization'
        "403":
          description: forbidden
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update organization metadata
      tags:
      - organizations
  /api/v1/orgs/invite:
    post:
      consumes:
      - application/json
      parameters:
      - description: Invite input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/orgs.InviteInput'
      - description: Organization context
        in: header
        name: X-Org-ID
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "201":
          description: invited
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: forbidden
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Invite user to organization
      tags:
      - organizations
  /api/v1/orgs/join:
    post:
      consumes:
      - application/json
      parameters:
      - description: Join input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/orgs.JoinInput'
      produces:
      - application/json
      responses:
        "200":
          description: joined
          schema:
            type: string
        "403":
          description: invalid invite
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Accept org invitation
      tags:
      - organizations
  /api/v1/orgs/members:
    get:
      description: Returns a list of all members in the current organization
      parameters:
      - description: Organization context
        in: header
        name: X-Org-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Member'
            type: array
        "401":
          description: unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List organization members
      tags:
      - organizations
  /api/v1/orgs/members/{userId}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      responses:
        "204":
          description: deleted
          schema:
            type: string
        "403":
          description: forbidden
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Remove member from organization
      tags:
      - organizations
  /api/v1/orgs/switch:
    post:
      consumes:
      - application/json
      parameters:
      - description: Org to switch to
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/orgs.SwitchOrgInput'
      produces:
      - application/json
      responses:
        "200":
          description: active org id
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: not a member
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Switch active organization
      tags:
      - organizations
  /api/v1/servers:
    get:
      consumes:
      - application/json
      description: 'Returns servers for the organization in X-Org-ID. Optional filters:
        status, role.'
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Filter by status (pending|provisioning|ready|failed)
        in: query
        name: status
        type: string
      - description: Filter by role
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/servers.serverResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: failed to list servers
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List servers (org scoped)
      tags:
      - servers
    post:
      consumes:
      - application/json
      description: Creates a server bound to the org in X-Org-ID. Validates that ssh_key_id
        belongs to the org.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Server payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/servers.createServerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/servers.serverResponse'
        "400":
          description: invalid json / missing fields / invalid status / invalid ssh_key_id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: create failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create server (org scoped)
      tags:
      - servers
  /api/v1/servers/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes the server.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Server ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: delete failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete server (org scoped)
      tags:
      - servers
    get:
      consumes:
      - application/json
      description: Returns one server in the given organization.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Server ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/servers.serverResponse'
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: fetch failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get server by ID (org scoped)
      tags:
      - servers
    patch:
      consumes:
      - application/json
      description: Partially update fields; changing ssh_key_id validates ownership.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Server ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/servers.updateServerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/servers.serverResponse'
        "400":
          description: invalid id / invalid json / invalid status / invalid ssh_key_id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: update failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update server (org scoped)
      tags:
      - servers
  /api/v1/ssh:
    get:
      consumes:
      - application/json
      description: Returns ssh keys for the organization in X-Org-ID.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ssh.sshResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: failed to list keys
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List ssh keys (org scoped)
      tags:
      - ssh
    post:
      consumes:
      - application/json
      description: Generates an RSA keypair, saves it, and returns metadata. Optionally
        set `download` to "public", "private", or "both" to download files immediately.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: Key generation options
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ssh.createSSHRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          headers:
            Content-Disposition:
              description: When download is requested
              type: string
          schema:
            $ref: '#/definitions/ssh.sshResponse'
        "400":
          description: invalid json / invalid bits
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: generation/create failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create ssh keypair (org scoped)
      tags:
      - ssh
  /api/v1/ssh/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes a keypair.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: SSH Key ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "500":
          description: delete failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete ssh keypair (org scoped)
      tags:
      - ssh
    get:
      consumes:
      - application/json
      description: Returns public key fields. Append `?reveal=true` to include the
        private key PEM.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: SSH Key ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Reveal private key PEM
        in: query
        name: reveal
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: When reveal=true
          schema:
            $ref: '#/definitions/ssh.sshRevealResponse'
        "400":
          description: invalid id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: fetch failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get ssh key by ID (org scoped)
      tags:
      - ssh
  /api/v1/ssh/{id}/download:
    get:
      description: Download `part=public|private|both` of the keypair. `both` returns
        a zip file.
      parameters:
      - description: Organization UUID
        in: header
        name: X-Org-ID
        required: true
        type: string
      - description: SSH Key ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Which part to download
        enum:
        - public
        - private
        - both
        in: query
        name: part
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: file content
          schema:
            type: string
        "400":
          description: invalid id / invalid part
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: organization required
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: download failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Download ssh key files by ID (org scoped)
      tags:
      - ssh
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
